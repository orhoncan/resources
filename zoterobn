${await new Promise (async (r) => {
  async function getAnnotation(item) {
    try {
      if (!item || !item.isAnnotation()) {
        return null;
      }
      let json = await Zotero.Annotations.toJSON(item);
      json.id = item.key;
      delete json.key;
      for (let key in json) {
        json[key] = json[key] || "";
      }
      json.tags = json.tags || [];
      return json;
    } catch (e) {
      Zotero.logError(e);
      return null;
    }
  }
function getEditorInstance(noteId) {
    return Zotero.Notes._editorInstances.find(
      (e) =>
        e._item.id === noteId && !Components.utils.isDeadWrapper(e._iframeWindow)
    );
  }

  async function getAnnotationsByColor(_item, color) {
    const annots = _item.getAnnotations().filter(item => item.annotationColor === color);
    if (annots.length === 0) {
      return {
        html: "",
      };
    }
    let annotations = [];
    for (let annot of annots) {
      const annotJson = await getAnnotation(annot);
      annotJson.attachmentItemID = _item.id;
      annotations.push(annotJson);
    }

    let editor = getEditorInstance(targetNoteItem.id)
    if (!editor) {
      alert("No active note editor detected. Please open workspace.");
      return r("");
    }
    await editor.importImages(annotations);
    return Zotero.EditorInstanceUtilities.serializeAnnotations(annotations);
  }

  const attachments = Zotero.Items.get(topItem.getAttachments()).filter((i) =>
    i.isPDFAttachment()
  );
let res = `<h1>${topItem.getField("title")}</h1>
<i>${topItem.getCreators().map((v)=>v.firstName+" "+v.lastName).join("; ")}</i>
<p>[${topItem.getField("DOI")}]</p>
<p>[${topItem.getField("Date")}]</p>`;

  const colors = {
    "#aaaaaa": "💡Purpose",           // Grey
    "#ffd400": "📝 Altı Çizilenler",  // White
    "#ff6666": "❗Önemli",         // Red
    "#5fb236": "❓Kaynak",        // Green
    "#2ea8e5": "📚Theory",            // Blue
    "#a28ae5": "⛏️Method",            // Purple
    "#e56eee": "📝Results",           // Magenta
    "#f19837": "👍Contribution"       // Orange
  }
    for (const attachment of attachments) {
    for (const color in colors) {
      if (Object.hasOwnProperty.call(colors, color)) {
        const colorName = colors[color];
        const renderedAnnotations = (await getAnnotationsByColor(attachment, color)).html;
        if (renderedAnnotations) {
          res += `<h3><p>${colorName}</p></h3>\n${renderedAnnotations}`;
        }
      }
    }
  const renderedAnnotations = (
      await getAnnotationsByColor(
        attachment,
        (_annot) => !colors.includes(_annot.annotationColor)
      )
    ).html;
    if (renderedAnnotations) {
      res += `<h2><p>Other Annotations</p></h2>\n${renderedAnnotations}`;
    }
  }
  r(res);
})}
